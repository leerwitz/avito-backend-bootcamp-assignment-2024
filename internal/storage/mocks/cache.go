// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	models "avitoBootcamp/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// DeleteFlatsByHouseId provides a mock function with given fields: houseId, userType
func (_m *Cache) DeleteFlatsByHouseId(houseId int64, userType string) {
	_m.Called(houseId, userType)
}

// GetFlatsByHouseID provides a mock function with given fields: houseId, userType
func (_m *Cache) GetFlatsByHouseID(houseId int64, userType string) ([]byte, error) {
	ret := _m.Called(houseId, userType)

	if len(ret) == 0 {
		panic("no return value specified for GetFlatsByHouseID")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) ([]byte, error)); ok {
		return rf(houseId, userType)
	}
	if rf, ok := ret.Get(0).(func(int64, string) []byte); ok {
		r0 = rf(houseId, userType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(houseId, userType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutFlatsByHouseID provides a mock function with given fields: flats, houseId, userType
func (_m *Cache) PutFlatsByHouseID(flats []models.Flat, houseId int64, userType string) error {
	ret := _m.Called(flats, houseId, userType)

	if len(ret) == 0 {
		panic("no return value specified for PutFlatsByHouseID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.Flat, int64, string) error); ok {
		r0 = rf(flats, houseId, userType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
