// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	models "avitoBootcamp/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// CreateFlat provides a mock function with given fields: flat
func (_m *Database) CreateFlat(flat models.Flat) (models.Flat, error) {
	ret := _m.Called(flat)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlat")
	}

	var r0 models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Flat) (models.Flat, error)); ok {
		return rf(flat)
	}
	if rf, ok := ret.Get(0).(func(models.Flat) models.Flat); ok {
		r0 = rf(flat)
	} else {
		r0 = ret.Get(0).(models.Flat)
	}

	if rf, ok := ret.Get(1).(func(models.Flat) error); ok {
		r1 = rf(flat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHouse provides a mock function with given fields: house
func (_m *Database) CreateHouse(house models.House) (models.House, error) {
	ret := _m.Called(house)

	if len(ret) == 0 {
		panic("no return value specified for CreateHouse")
	}

	var r0 models.House
	var r1 error
	if rf, ok := ret.Get(0).(func(models.House) (models.House, error)); ok {
		return rf(house)
	}
	if rf, ok := ret.Get(0).(func(models.House) models.House); ok {
		r0 = rf(house)
	} else {
		r0 = ret.Get(0).(models.House)
	}

	if rf, ok := ret.Get(1).(func(models.House) error); ok {
		r1 = rf(house)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: user
func (_m *Database) CreateUser(user models.User) (models.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (models.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlatsByHouseID provides a mock function with given fields: houseId, userType
func (_m *Database) GetFlatsByHouseID(houseId int64, userType string) ([]models.Flat, error) {
	ret := _m.Called(houseId, userType)

	if len(ret) == 0 {
		panic("no return value specified for GetFlatsByHouseID")
	}

	var r0 []models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) ([]models.Flat, error)); ok {
		return rf(houseId, userType)
	}
	if rf, ok := ret.Get(0).(func(int64, string) []models.Flat); ok {
		r0 = rf(houseId, userType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(houseId, userType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: id
func (_m *Database) GetUserById(id string) (models.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAtHouseLastFlatTime provides a mock function with given fields: houseId
func (_m *Database) UpdateAtHouseLastFlatTime(houseId int64) error {
	ret := _m.Called(houseId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAtHouseLastFlatTime")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(houseId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFlat provides a mock function with given fields: flat
func (_m *Database) UpdateFlat(flat models.Flat) (models.Flat, error) {
	ret := _m.Called(flat)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlat")
	}

	var r0 models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Flat) (models.Flat, error)); ok {
		return rf(flat)
	}
	if rf, ok := ret.Get(0).(func(models.Flat) models.Flat); ok {
		r0 = rf(flat)
	} else {
		r0 = ret.Get(0).(models.Flat)
	}

	if rf, ok := ret.Get(1).(func(models.Flat) error); ok {
		r1 = rf(flat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
